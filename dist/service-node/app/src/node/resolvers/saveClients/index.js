"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveClients = void 0;
// Dependencies
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const lodash_1 = require("lodash");
const getAllClients = (partnerID, ctx) => {
    return ctx.clients.masterdata.searchDocuments({
        dataEntity: 'PC',
        fields: [
            'id',
            'name',
            'imgFile',
            'partnerID',
            'isActive',
            'isRemoved',
            'description',
            'accountName',
        ],
        where: `(partnerID=${partnerID} AND isRemoved=false)`,
        pagination: {
            page: 1,
            pageSize: 5,
        },
    });
};
const saveAttachment = async (ctx, { name, imgFile }, id) => {
    const { createReadStream, filename, encoding, mimetype } = await imgFile;
    const saveTo = path_1.default.join(os_1.default.tmpdir(), path_1.default.basename(filename));
    const stream = createReadStream(saveTo);
    const [, ext] = filename.split('.');
    const nameFriendly = name.toLowerCase().replace(/[\s]+/g, '-');
    //@ts-ignore
    stream.fieldname = 'file' + Math.random().toString(16).substring(2);
    //@ts-ignore
    stream.name = stream.filename = `${nameFriendly}.${ext}`;
    //@ts-ignore
    stream.transferEncoding = stream.encoding = encoding;
    //@ts-ignore
    stream.mimeType = stream.mime = mimetype;
    //@ts-ignore
    stream.mimeType = stream.mime = mimetype;
    //@ts-ignore
    stream.path = saveTo;
    await ctx.clients.masterDataV1.saveAttachment({
        id,
        dataEntity: 'PC',
        field: 'imgFile',
        file: stream,
    });
};
exports.saveClients = async (_, { partnerID, clients }, ctx) => {
    await ctx.clients.masterdata.updatePartialDocument({
        id: partnerID,
        dataEntity: 'PN',
        fields: {
            status: 'PENDING',
        },
    });
    const promises = clients.map(async (client) => {
        await ctx.clients.masterdata.updatePartialDocument({
            id: client.id,
            dataEntity: 'PC',
            fields: lodash_1.omit(client, 'id'),
        });
        if ('imgFile' in client) {
            const input = {
                name: client.name,
                imgFile: client.imgFile,
            };
            await saveAttachment(ctx, input, client.id);
        }
        return;
    });
    await Promise.all(promises);
    return getAllClients(partnerID, ctx);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbm9kZS9yZXNvbHZlcnMvc2F2ZUNsaWVudHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZUFBZTtBQUNmLDRDQUFtQjtBQUNuQixnREFBdUI7QUFDdkIsbUNBQTZCO0FBYTdCLE1BQU0sYUFBYSxHQUFHLENBQUMsU0FBeUIsRUFBRSxHQUFZLEVBQUUsRUFBRTtJQUNoRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBVTtRQUNyRCxVQUFVLEVBQUUsSUFBSTtRQUNoQixNQUFNLEVBQUU7WUFDTixJQUFJO1lBQ0osTUFBTTtZQUNOLFNBQVM7WUFDVCxXQUFXO1lBQ1gsVUFBVTtZQUNWLFdBQVc7WUFDWCxhQUFhO1lBQ2IsYUFBYTtTQUNkO1FBQ0QsS0FBSyxFQUFFLGNBQWMsU0FBUyx1QkFBdUI7UUFDckQsVUFBVSxFQUFFO1lBQ1YsSUFBSSxFQUFFLENBQUM7WUFDUCxRQUFRLEVBQUUsQ0FBQztTQUNaO0tBQ0YsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUMxQixHQUFZLEVBQ1osRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFnRCxFQUMvRCxFQUFVLEVBQ1YsRUFBRTtJQUNGLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFBO0lBRXhFLE1BQU0sTUFBTSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsWUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLGNBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUU5RCxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUV2QyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRW5DLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBRTlELFlBQVk7SUFDWixNQUFNLENBQUMsU0FBUyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVuRSxZQUFZO0lBQ1osTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLEdBQUcsWUFBWSxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQ3hELFlBQVk7SUFDWixNQUFNLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7SUFDcEQsWUFBWTtJQUNaLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUE7SUFDeEMsWUFBWTtJQUNaLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUE7SUFDeEMsWUFBWTtJQUNaLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFBO0lBRXBCLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDO1FBQzVDLEVBQUU7UUFDRixVQUFVLEVBQUUsSUFBSTtRQUNoQixLQUFLLEVBQUUsU0FBUztRQUNoQixJQUFJLEVBQUUsTUFBTTtLQUNiLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQUVZLFFBQUEsV0FBVyxHQUFHLEtBQUssRUFDOUIsQ0FBTSxFQUNOLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBUSxFQUM1QixHQUFZLEVBQ1osRUFBRTtJQUNGLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7UUFDakQsRUFBRSxFQUFFLFNBQVM7UUFDYixVQUFVLEVBQUUsSUFBSTtRQUNoQixNQUFNLEVBQUU7WUFDTixNQUFNLEVBQUUsU0FBUztTQUNsQjtLQUNGLENBQUMsQ0FBQTtJQUVGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzVDLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7WUFDakQsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ2IsVUFBVSxFQUFFLElBQUk7WUFDaEIsTUFBTSxFQUFFLGFBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1NBQzNCLENBQUMsQ0FBQTtRQUVGLElBQUksU0FBUyxJQUFJLE1BQU0sRUFBRTtZQUN2QixNQUFNLEtBQUssR0FBRztnQkFDWixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7Z0JBQ2pCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTzthQUN4QixDQUFBO1lBRUQsTUFBTSxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDNUM7UUFFRCxPQUFNO0lBQ1IsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFM0IsT0FBTyxhQUFhLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQ3RDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIERlcGVuZGVuY2llc1xuaW1wb3J0IG9zIGZyb20gJ29zJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IG9taXQgfSBmcm9tICdsb2Rhc2gnXG5cbi8vIFR5cGluZ1xuaW1wb3J0IHsgSVBhcnRuZXIgfSBmcm9tICcuLi8uLi90eXBpbmdzL3BhcnRuZXInXG5pbXBvcnQgeyBJQ2xpZW50IH0gZnJvbSAnLi4vLi4vdHlwaW5ncy9jbGllbnQnXG5cbmludGVyZmFjZSBBcmdzIHtcbiAgcGFydG5lcklEOiBJUGFydG5lclsnaWQnXVxuICBjbGllbnRzOiAoT21pdDxJQ2xpZW50LCAnaW1nRmlsZSc+ICYge1xuICAgIGltZ0ZpbGU6IFByb21pc2U8RmlsZT5cbiAgfSlbXVxufVxuXG5jb25zdCBnZXRBbGxDbGllbnRzID0gKHBhcnRuZXJJRDogSVBhcnRuZXJbJ2lkJ10sIGN0eDogQ29udGV4dCkgPT4ge1xuICByZXR1cm4gY3R4LmNsaWVudHMubWFzdGVyZGF0YS5zZWFyY2hEb2N1bWVudHM8SUNsaWVudD4oe1xuICAgIGRhdGFFbnRpdHk6ICdQQycsXG4gICAgZmllbGRzOiBbXG4gICAgICAnaWQnLFxuICAgICAgJ25hbWUnLFxuICAgICAgJ2ltZ0ZpbGUnLFxuICAgICAgJ3BhcnRuZXJJRCcsXG4gICAgICAnaXNBY3RpdmUnLFxuICAgICAgJ2lzUmVtb3ZlZCcsXG4gICAgICAnZGVzY3JpcHRpb24nLFxuICAgICAgJ2FjY291bnROYW1lJyxcbiAgICBdLFxuICAgIHdoZXJlOiBgKHBhcnRuZXJJRD0ke3BhcnRuZXJJRH0gQU5EIGlzUmVtb3ZlZD1mYWxzZSlgLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIHBhZ2U6IDEsXG4gICAgICBwYWdlU2l6ZTogNSxcbiAgICB9LFxuICB9KVxufVxuXG5jb25zdCBzYXZlQXR0YWNobWVudCA9IGFzeW5jIChcbiAgY3R4OiBDb250ZXh0LFxuICB7IG5hbWUsIGltZ0ZpbGUgfTogUGljazxBcmdzWydjbGllbnRzJ11bMF0sICduYW1lJyB8ICdpbWdGaWxlJz4sXG4gIGlkOiBzdHJpbmdcbikgPT4ge1xuICBjb25zdCB7IGNyZWF0ZVJlYWRTdHJlYW0sIGZpbGVuYW1lLCBlbmNvZGluZywgbWltZXR5cGUgfSA9IGF3YWl0IGltZ0ZpbGVcblxuICBjb25zdCBzYXZlVG8gPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksIHBhdGguYmFzZW5hbWUoZmlsZW5hbWUpKVxuXG4gIGNvbnN0IHN0cmVhbSA9IGNyZWF0ZVJlYWRTdHJlYW0oc2F2ZVRvKVxuXG4gIGNvbnN0IFssIGV4dF0gPSBmaWxlbmFtZS5zcGxpdCgnLicpXG5cbiAgY29uc3QgbmFtZUZyaWVuZGx5ID0gbmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tcXHNdKy9nLCAnLScpXG5cbiAgLy9AdHMtaWdub3JlXG4gIHN0cmVhbS5maWVsZG5hbWUgPSAnZmlsZScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMilcblxuICAvL0B0cy1pZ25vcmVcbiAgc3RyZWFtLm5hbWUgPSBzdHJlYW0uZmlsZW5hbWUgPSBgJHtuYW1lRnJpZW5kbHl9LiR7ZXh0fWBcbiAgLy9AdHMtaWdub3JlXG4gIHN0cmVhbS50cmFuc2ZlckVuY29kaW5nID0gc3RyZWFtLmVuY29kaW5nID0gZW5jb2RpbmdcbiAgLy9AdHMtaWdub3JlXG4gIHN0cmVhbS5taW1lVHlwZSA9IHN0cmVhbS5taW1lID0gbWltZXR5cGVcbiAgLy9AdHMtaWdub3JlXG4gIHN0cmVhbS5taW1lVHlwZSA9IHN0cmVhbS5taW1lID0gbWltZXR5cGVcbiAgLy9AdHMtaWdub3JlXG4gIHN0cmVhbS5wYXRoID0gc2F2ZVRvXG5cbiAgYXdhaXQgY3R4LmNsaWVudHMubWFzdGVyRGF0YVYxLnNhdmVBdHRhY2htZW50KHtcbiAgICBpZCxcbiAgICBkYXRhRW50aXR5OiAnUEMnLFxuICAgIGZpZWxkOiAnaW1nRmlsZScsXG4gICAgZmlsZTogc3RyZWFtLFxuICB9KVxufVxuXG5leHBvcnQgY29uc3Qgc2F2ZUNsaWVudHMgPSBhc3luYyAoXG4gIF86IGFueSxcbiAgeyBwYXJ0bmVySUQsIGNsaWVudHMgfTogQXJncyxcbiAgY3R4OiBDb250ZXh0XG4pID0+IHtcbiAgYXdhaXQgY3R4LmNsaWVudHMubWFzdGVyZGF0YS51cGRhdGVQYXJ0aWFsRG9jdW1lbnQoe1xuICAgIGlkOiBwYXJ0bmVySUQsXG4gICAgZGF0YUVudGl0eTogJ1BOJyxcbiAgICBmaWVsZHM6IHtcbiAgICAgIHN0YXR1czogJ1BFTkRJTkcnLFxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3QgcHJvbWlzZXMgPSBjbGllbnRzLm1hcChhc3luYyAoY2xpZW50KSA9PiB7XG4gICAgYXdhaXQgY3R4LmNsaWVudHMubWFzdGVyZGF0YS51cGRhdGVQYXJ0aWFsRG9jdW1lbnQoe1xuICAgICAgaWQ6IGNsaWVudC5pZCxcbiAgICAgIGRhdGFFbnRpdHk6ICdQQycsXG4gICAgICBmaWVsZHM6IG9taXQoY2xpZW50LCAnaWQnKSxcbiAgICB9KVxuXG4gICAgaWYgKCdpbWdGaWxlJyBpbiBjbGllbnQpIHtcbiAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICBuYW1lOiBjbGllbnQubmFtZSxcbiAgICAgICAgaW1nRmlsZTogY2xpZW50LmltZ0ZpbGUsXG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHNhdmVBdHRhY2htZW50KGN0eCwgaW5wdXQsIGNsaWVudC5pZClcbiAgICB9XG5cbiAgICByZXR1cm5cbiAgfSlcblxuICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcylcblxuICByZXR1cm4gZ2V0QWxsQ2xpZW50cyhwYXJ0bmVySUQsIGN0eClcbn1cbiJdfQ==