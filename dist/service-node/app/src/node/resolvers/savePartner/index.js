"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.savePartner = void 0;
// Dependencies
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const lodash_1 = require("lodash");
// Utils
const getPartner_1 = require("../../utils/getPartner");
const getPartnerById_1 = require("../../utils/getPartnerById");
const saveAttachment = async (ctx, input, id) => {
    const { account } = input;
    const { createReadStream, filename, encoding, mimetype } = await input.imgFile;
    const saveTo = path_1.default.join(os_1.default.tmpdir(), path_1.default.basename(filename));
    const stream = createReadStream(saveTo);
    const [, ext] = filename.split('.');
    //@ts-ignore
    stream.fieldname = 'file' + Math.random().toString(16).substring(2);
    //@ts-ignore
    stream.name = stream.filename = `${account}.${ext}`;
    //@ts-ignore
    stream.transferEncoding = stream.encoding = encoding;
    //@ts-ignore
    stream.mimeType = stream.mime = mimetype;
    //@ts-ignore
    stream.mimeType = stream.mime = mimetype;
    //@ts-ignore
    stream.path = saveTo;
    await ctx.clients.masterDataV1.saveAttachment({
        id,
        dataEntity: 'PN',
        field: 'imgFile',
        file: stream,
    });
};
exports.savePartner = async (_, { input }, ctx) => {
    console.log({ input });
    const data = lodash_1.assign(input, {
        types: JSON.stringify(input.types),
        regions: JSON.stringify(input.regions),
        categories: JSON.stringify(input.categories),
        subcategories: JSON.stringify(input.subcategories),
    });
    const document = await getPartner_1.getPartner(input.account, ctx);
    let documentId;
    if (!document) {
        const response = await ctx.clients.masterdata.createDocument({
            dataEntity: 'PN',
            fields: {
                ...data,
                status: 'PENDING',
            },
        });
        documentId = response.DocumentId;
    }
    else {
        await ctx.clients.masterdata.updatePartialDocument({
            id: document.id,
            dataEntity: 'PN',
            fields: {
                ...data,
                status: 'PENDING',
            },
        });
        documentId = document.id;
    }
    if ('imgFile' in input) {
        await saveAttachment(ctx, input, documentId);
    }
    const newDocument = await getPartnerById_1.getPartnerById(documentId, ctx);
    if (newDocument) {
        return {
            ...newDocument,
            types: JSON.parse(newDocument.types.toString()),
            regions: JSON.parse(newDocument.regions.toString()),
            categories: JSON.parse(newDocument.categories.toString()),
            subcategories: JSON.parse(newDocument.subcategories.toString()),
        };
    }
    return newDocument;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbm9kZS9yZXNvbHZlcnMvc2F2ZVBhcnRuZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZUFBZTtBQUNmLDRDQUFtQjtBQUNuQixnREFBdUI7QUFDdkIsbUNBQStCO0FBSy9CLFFBQVE7QUFDUix1REFBbUQ7QUFDbkQsK0RBQTJEO0FBUTNELE1BQU0sY0FBYyxHQUFHLEtBQUssRUFDMUIsR0FBWSxFQUNaLEtBQW9CLEVBQ3BCLEVBQVUsRUFDVixFQUFFO0lBQ0YsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQTtJQUV6QixNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUE7SUFFOUUsTUFBTSxNQUFNLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxZQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO0lBRTlELE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXZDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFbkMsWUFBWTtJQUNaLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRW5FLFlBQVk7SUFDWixNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEdBQUcsR0FBRyxPQUFPLElBQUksR0FBRyxFQUFFLENBQUE7SUFDbkQsWUFBWTtJQUNaLE1BQU0sQ0FBQyxnQkFBZ0IsR0FB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Q0FBQTtLQUNGO0lBRUQsT0FBTyxXQUFXLENBQUE7QUFDcEIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRGVwZW5kZW5jaWVzXG5pbXBvcnQgb3MgZnJvbSAnb3MnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoJ1xuXG4vLyBUeXBpbmdcbmltcG9ydCB7IElQYXJ0bmVyIH0gZnJvbSAnLi4vLi4vdHlwaW5ncy9wYXJ0bmVyJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgZ2V0UGFydG5lciB9IGZyb20gJy4uLy4uL3V0aWxzL2dldFBhcnRuZXInXG5pbXBvcnQgeyBnZXRQYXJ0bmVyQnlJZCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldFBhcnRuZXJCeUlkJ1xuXG5pbnRlcmZhY2UgQXJncyB7XG4gIGlucHV0OiBPbWl0PElQYXJ0bmVyLCAnc3RhdHVzJyB8ICdpZCcgfCAnaW1nRmlsZSc+ICYge1xuICAgIGltZ0ZpbGU6IFByb21pc2U8RmlsZT5cbiAgfVxufVxuXG5jb25zdCBzYXZlQXR0YWNobWVudCA9IGFzeW5jIChcbiAgY3R4OiBDb250ZXh0LFxuICBpbnB1dDogQXJnc1snaW5wdXQnXSxcbiAgaWQ6IHN0cmluZ1xuKSA9PiB7XG4gIGNvbnN0IHsgYWNjb3VudCB9ID0gaW5wdXRcblxuICBjb25zdCB7IGNyZWF0ZVJlYWRTdHJlYW0sIGZpbGVuYW1lLCBlbmNvZGluZywgbWltZXR5cGUgfSA9IGF3YWl0IGlucHV0LmltZ0ZpbGVcblxuICBjb25zdCBzYXZlVG8gPSBwYXRoLmpvaW4ob3MudG1wZGlyKCksIHBhdGguYmFzZW5hbWUoZmlsZW5hbWUpKVxuXG4gIGNvbnN0IHN0cmVhbSA9IGNyZWF0ZVJlYWRTdHJlYW0oc2F2ZVRvKVxuXG4gIGNvbnN0IFssIGV4dF0gPSBmaWxlbmFtZS5zcGxpdCgnLicpXG5cbiAgLy9AdHMtaWdub3JlXG4gIHN0cmVhbS5maWVsZG5hbWUgPSAnZmlsZScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMilcblxuICAvL0B0cy1pZ25vcmVcbiAgc3RyZWFtLm5hbWUgPSBzdHJlYW0uZmlsZW5hbWUgPSBgJHthY2NvdW50fS4ke2V4dH1gXG4gIC8vQHRzLWlnbm9yZVxuICBzdHJlYW0udHJhbnNmZXJFbmNvZGluZyA9IHN0cmVhbS5lbmNvZGluZyA9IGVuY29kaW5nXG4gIC8vQHRzLWlnbm9yZVxuICBzdHJlYW0ubWltZVR5cGUgPSBzdHJlYW0ubWltZSA9IG1pbWV0eXBlXG4gIC8vQHRzLWlnbm9yZVxuICBzdHJlYW0ubWltZVR5cGUgPSBzdHJlYW0ubWltZSA9IG1pbWV0eXBlXG4gIC8vQHRzLWlnbm9yZVxuICBzdHJlYW0ucGF0aCA9IHNhdmVUb1xuXG4gIGF3YWl0IGN0eC5jbGllbnRzLm1hc3RlckRhdGFWMS5zYXZlQXR0YWNobWVudCh7XG4gICAgaWQsXG4gICAgZGF0YUVudGl0eTogJ1BOJyxcbiAgICBmaWVsZDogJ2ltZ0ZpbGUnLFxuICAgIGZpbGU6IHN0cmVhbSxcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHNhdmVQYXJ0bmVyID0gYXN5bmMgKF86IGFueSwgeyBpbnB1dCB9OiBBcmdzLCBjdHg6IENvbnRleHQpID0+IHtcblxuICBjb25zb2xlLmxvZyh7IGlucHV0IH0pXG5cbiAgY29uc3QgZGF0YSA9IGFzc2lnbihpbnB1dCwge1xuICAgIHR5cGVzOiBKU09OLnN0cmluZ2lmeShpbnB1dC50eXBlcyksXG4gICAgcmVnaW9uczogSlNPTi5zdHJpbmdpZnkoaW5wdXQucmVnaW9ucyksXG4gICAgY2F0ZWdvcmllczogSlNPTi5zdHJpbmdpZnkoaW5wdXQuY2F0ZWdvcmllcyksXG4gICAgc3ViY2F0ZWdvcmllczogSlNPTi5zdHJpbmdpZnkoaW5wdXQuc3ViY2F0ZWdvcmllcyksXG4gIH0pXG5cbiAgY29uc3QgZG9jdW1lbnQgPSBhd2FpdCBnZXRQYXJ0bmVyKGlucHV0LmFjY291bnQsIGN0eClcblxuICBsZXQgZG9jdW1lbnRJZFxuXG4gIGlmICghZG9jdW1lbnQpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGN0eC5jbGllbnRzLm1hc3RlcmRhdGEuY3JlYXRlRG9jdW1lbnQoe1xuICAgICAgZGF0YUVudGl0eTogJ1BOJyxcbiAgICAgIGZpZWxkczoge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBzdGF0dXM6ICdQRU5ESU5HJyxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGRvY3VtZW50SWQgPSByZXNwb25zZS5Eb2N1bWVudElkXG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgY3R4LmNsaWVudHMubWFzdGVyZGF0YS51cGRhdGVQYXJ0aWFsRG9jdW1lbnQoe1xuICAgICAgaWQ6IGRvY3VtZW50LmlkLFxuICAgICAgZGF0YUVudGl0eTogJ1BOJyxcbiAgICAgIGZpZWxkczoge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBzdGF0dXM6ICdQRU5ESU5HJyxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGRvY3VtZW50SWQgPSBkb2N1bWVudC5pZFxuICB9XG5cbiAgaWYgKCdpbWdGaWxlJyBpbiBpbnB1dCkge1xuICAgIGF3YWl0IHNhdmVBdHRhY2htZW50KGN0eCwgaW5wdXQsIGRvY3VtZW50SWQpXG4gIH1cblxuICBjb25zdCBuZXdEb2N1bWVudCA9IGF3YWl0IGdldFBhcnRuZXJCeUlkKGRvY3VtZW50SWQsIGN0eClcblxuICBpZiAobmV3RG9jdW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubmV3RG9jdW1lbnQsXG4gICAgICB0eXBlczogSlNPTi5wYXJzZShuZXdEb2N1bWVudC50eXBlcy50b1N0cmluZygpKSxcbiAgICAgIHJlZ2lvbnM6IEpTT04ucGFyc2UobmV3RG9jdW1lbnQucmVnaW9ucy50b1N0cmluZygpKSxcbiAgICAgIGNhdGVnb3JpZXM6IEpTT04ucGFyc2UobmV3RG9jdW1lbnQuY2F0ZWdvcmllcy50b1N0cmluZygpKSxcbiAgICAgIHN1YmNhdGVnb3JpZXM6IEpTT04ucGFyc2UobmV3RG9jdW1lbnQuc3ViY2F0ZWdvcmllcy50b1N0cmluZygpKSxcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3RG9jdW1lbnRcbn1cbiJdfQ==