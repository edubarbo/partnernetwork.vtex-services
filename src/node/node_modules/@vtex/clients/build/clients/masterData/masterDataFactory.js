"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.masterDataFor = void 0;
const api_1 = require("@vtex/api");
class MasterDataEntity extends api_1.JanusClient {
}
const GLOBAL = '';
/**
 * This is necessary since masterdata does not accept special characters on entity name
 * This function replaces `.` and `-` for `_`
 * @param str dataEntityName
 */
const normalizeEntityName = (str) => str.replace(/(\.)|-|:/gi, '_');
const versionDescriptor = (isProduction, workspace) => isProduction ? GLOBAL : `-${workspace}`;
exports.masterDataFor = (entityName, providerAppId) => {
    return class extends MasterDataEntity {
        constructor(ctx, options) {
            super(ctx, options);
            const app = api_1.parseAppId(providerAppId !== null && providerAppId !== void 0 ? providerAppId : process.env.VTEX_APP_ID);
            this.md = new api_1.MasterData(ctx, options);
            this.schema = `${app.version}${versionDescriptor(ctx.production, ctx.workspace)}`;
            this.dataEntity = normalizeEntityName(`${app.name}_${entityName}`);
        }
        save(entity) {
            return this.md.createDocument({
                dataEntity: this.dataEntity,
                fields: entity,
                schema: this.schema,
            });
        }
        update(id, fields) {
            return this.md.updatePartialDocument({
                dataEntity: this.dataEntity,
                id,
                fields,
                schema: this.schema,
            });
        }
        saveOrUpdate(fields) {
            return this.md.createOrUpdateEntireDocument({
                dataEntity: this.dataEntity,
                fields,
                schema: this.schema,
            });
        }
        delete(id) {
            return this.md.deleteDocument({ dataEntity: this.dataEntity, id });
        }
        // eslint-disable-next-line max-params
        search(pagination, fields, sort, where) {
            return this.md.searchDocuments({
                dataEntity: this.dataEntity,
                pagination,
                fields: fields.map((field) => field.toString()),
                sort,
                where,
                schema: this.schema,
            });
        }
        get(id, fields) {
            return this.md.getDocument({
                dataEntity: this.dataEntity,
                id,
                fields: fields.map((field) => field.toString()),
            });
        }
    };
};
