import { InstanceOptions, IOContext, JanusClient, RequestTracingConfig } from '@vtex/api';
import { AuthMethod } from '../typings/tokens';
import { GetSkuResponse, Seller } from '../typings/catalog';
export declare class Catalog extends JanusClient {
    constructor(ctx: IOContext, options?: InstanceOptions);
    getProductsAndSkus(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<any>;
    getSkuById(skuId: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<GetSkuResponse>;
    changeNotification({ sellerId, sellerSkuId, authMethod, }: ChangeNotificationArgs, tracingConfig?: RequestTracingConfig): Promise<void>;
    createSeller(seller: Seller, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<void>;
    getSellerList(authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Seller[]>;
    seller(id: string, authMethod?: AuthMethod, tracingConfig?: RequestTracingConfig): Promise<Seller>;
}
interface ChangeNotificationArgs {
    sellerId: string;
    sellerSkuId: string;
    authMethod?: AuthMethod;
}
export {};
